#!/usr/bin/env -S cargo +nightly --quiet -Zscript -Zgc
```cargo
[dependencies]
audiotags = "0.4.1"
image = "0.24.7"
mpd-easy = "0.2.1"
# mpd-easy = { path = "/Users/john.allen/dev/src/playground/mp-cli/lib/" }
palette_extract = "0.1.0"
rand = "0.8.5"
sketchybar-rs = "0.2.0"
```

use std::io::Cursor;
use std::thread;
use std::time::Duration;

use audiotags::Tag;
use image::io::Reader as ImageReader;
use rand::seq::SliceRandom;

const CACHE: &str = "/Users/john.allen/Library/Caches/org.nixos";

fn main() {
    let mut client = mpd_easy::Client::new("localhost", "6600", None).unwrap();
    let mut album_name = String::new();

    loop {
        let status = client.status().unwrap();

        if status.file_path.is_none() {
            thread::sleep(Duration::from_secs(2));
            continue;
        }

        let mut label = String::new();

        let icon = match status.state {
            mpd_easy::State::Play => "".to_string(),
            mpd_easy::State::Pause => "".to_string(),
            mpd_easy::State::Stop => "".to_string(),
        };

        if status.state != mpd_easy::State::Stop {
            label = format!(
                "{} • {} • {} [{}/{}]",
                status.title,
                status.artist,
                status.album,
                status.elapsed,
                status.track_length,
            );
        }

        let label = label.replace("'", "");

        if album_name != status.album {
            update_artwork(&status.file_path.unwrap());
            album_name = status.album.clone();
        }

        let message = format!("--set mpd icon=\"{icon}\" label=\"{label}\"");
        sketchybar_rs::message(&message, Some("bottombar")).unwrap();
        let message =
            format!("--set mpd_logo background.image=\"/{CACHE}/cover.png\"");
        sketchybar_rs::message(&message, Some("bottombar")).unwrap();
        let message =
            format!("--set mpd_cover background.image=\"/{CACHE}/cover-large.png\"");
        sketchybar_rs::message(&message, Some("bottombar")).unwrap();

        thread::sleep(Duration::from_secs(1));
    }
}

fn update_artwork(file: &str) {
    // TODO: should be able to get this from mpd status
    let music_dir = "/Users/john.allen/Music/Music/Music/Media.localized/Music";
    let full_path = format!("{music_dir}/{file}");
    // dbg!(&full_path);

    let tag = Tag::new().read_from_path(full_path).unwrap();

    if tag.album_cover().is_none() {
        std::fs::copy(
            format!("/{CACHE}/album-cover-missing.png"),
            format!("/{CACHE}/cover.png")
        )
        .unwrap();

        return;
    }

    let cover = tag.album_cover().unwrap();

    let image = ImageReader::new(Cursor::new(&cover.data))
        .with_guessed_format()
        .unwrap()
        .decode()
        .unwrap();

    let image = image.resize(256, 256, image::imageops::FilterType::Lanczos3);
    image.save(format!("/{CACHE}/cover-large.png")).unwrap();

    let image = image.resize(128, 128, image::imageops::FilterType::Lanczos3);
    image.save(format!("/{CACHE}/cover.png")).unwrap();

    let palette = palette_extract::get_palette_rgb(&cover.data);
    let color = palette.choose(&mut rand::thread_rng()).unwrap();

    let hex = format!("0xff{:02X}{:02X}{:02X}", color.r, color.g, color.b);

    let message = format!("--set mpd icon.color=\"{hex}\"");
    sketchybar_rs::message(&message, Some("bottombar")).unwrap();
}

// vim: filetype=rust
